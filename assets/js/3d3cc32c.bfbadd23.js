"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[273],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5309:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:4},s=void 0,i={unversionedId:"reference/Resources",id:"reference/Resources",title:"Resources",description:"Sometimes, it is useful to have global data that is not associated with any specific entity. To handle this, BagelECS supports bevy inspired resources. These follow most of the same rules as components, except they are associated with the world instead of entities.",source:"@site/docs/reference/Resources.md",sourceDirName:"reference",slug:"/reference/Resources",permalink:"/BagelECS/docs/reference/Resources",draft:!1,editUrl:"https://github.com/Bagel03/BagelECS/edit/master/docs/docs/reference/Resources.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Components",permalink:"/BagelECS/docs/reference/Components"},next:{title:"Queries",permalink:"/BagelECS/docs/reference/Queries"}},l={},c=[{value:"Add A Resource",id:"add-a-resource",level:2},{value:"Remove a resource",id:"remove-a-resource",level:2},{value:"Get a resource",id:"get-a-resource",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Sometimes, it is useful to have global data that is not associated with any specific entity. To handle this, BagelECS supports ",(0,o.kt)("a",{parentName:"p",href:"https://bevyengine.org"},"bevy")," inspired ",(0,o.kt)("em",{parentName:"p"},"resources"),". These follow most of the same rules as components, except they are associated with the world instead of entities."),(0,o.kt)("h2",{id:"add-a-resource"},"Add A Resource"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"World.prototype.add")," will add anything as a resource. Specify a second argument if you want to use a type more than once (Similar to ",(0,o.kt)("a",{parentName:"p",href:"/BagelECS/docs/reference/Entities#adding-components"},"Entities"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import {Camera, Ojbect3D} from "three"\nconst world = new World(100);\n\nworld.add(new Camera(..));\n\nworld.add(new Object3D(..), "ground");\nworld.add(new Object3D(..), "skybox");\n')),(0,o.kt)("admonition",{title:"Notice how all of those things could have been individual entities",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},'For example, a camera entity or a skybox entity. Even if you only will have 1 of whatever "thing" you are representing with a resource, most of the time it is better to add it as an entity, because resources will not show up in queries and will not interact with the rest of the world through systems.\nFor that reason, most resources will probabbly end up looking something like this:'),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'world.add(1000 / 60, "framerate");\nworld.add("Player1", "name");\n'))),(0,o.kt)("h2",{id:"remove-a-resource"},"Remove a resource"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"World.prototype.remove")," to remove a resource from a supplied ",(0,o.kt)("inlineCode",{parentName:"p"},"intoId"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'world.remove(Camera);\nworld.remove("framerate");\n')),(0,o.kt)("h2",{id:"get-a-resource"},"Get a resource"),(0,o.kt)("p",null,"Getting resources is very similar to getting ",(0,o.kt)("a",{parentName:"p",href:"/BagelECS/docs/reference/Entities#getting-data"},"components"),", just supply an ",(0,o.kt)("inlineCode",{parentName:"p"},"intoId")," and a generic type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'world.get<number>("framerate");\nworld.get(Camera);\n')))}u.isMDXComponent=!0}}]);