"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,y=c["".concat(l,".").concat(m)]||c[m]||u[m]||s;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var d=2;d<s;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9330:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_position:6},o=void 0,i={unversionedId:"reference/Systems",id:"reference/Systems",title:"Systems",description:"Systems define how your entities interact with each other in the world, and use queries to modify specific entities' properties",source:"@site/docs/reference/Systems.md",sourceDirName:"reference",slug:"/reference/Systems",permalink:"/BagelECS/docs/reference/Systems",draft:!1,editUrl:"https://github.com/Bagel03/BagelECS/edit/master/docs/docs/reference/Systems.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Queries",permalink:"/BagelECS/docs/reference/Queries"},next:{title:"Multithreading",permalink:"/BagelECS/docs/reference/Multithreading"}},l={},d=[{value:"Create a System",id:"create-a-system",level:2},{value:"Queries",id:"queries",level:3},{value:"Add a system to the world",id:"add-a-system-to-the-world",level:2},{value:"Enable a system:",id:"enable-a-system",level:2},{value:"Disable a system:",id:"disable-a-system",level:2},{value:"Update systems",id:"update-systems",level:2}],p={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Systems define how your entities interact with each other in the world, and use queries to modify specific entities' properties"),(0,a.kt)("h2",{id:"create-a-system"},"Create a System"),(0,a.kt)("p",null,"To create a system, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"System")," function to create a class and extend it to add your own methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class MyCustomSys extends System({}) {}\n")),(0,a.kt)("h3",{id:"queries"},"Queries"),(0,a.kt)("p",null,"As mentioned in the ",(0,a.kt)("a",{parentName:"p",href:"/BagelECS/docs/reference/Queries#within-systems"},"queries")," page, the ",(0,a.kt)("inlineCode",{parentName:"p"},"System()")," function takes a single argument: A ",(0,a.kt)("inlineCode",{parentName:"p"},"Tree")," of query modifiers (or modifier ",(0,a.kt)("a",{parentName:"p",href:"/BagelECS/docs/reference/Queries#modifiers"},"shorthand"),").\nThese then create a matching tree of queries that can be accessed inside the system's ",(0,a.kt)("inlineCode",{parentName:"p"},"entities")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class MyCustomSys extends System(With(ComponentA)) {\n    update() {\n        this.entities.forEach((ent) => console.log(ent.get(ComponentA)));\n    }\n}\n")),(0,a.kt)("h2",{id:"add-a-system-to-the-world"},"Add a system to the world"),(0,a.kt)("p",null,"To add a system to the world, you pass either the extended class or an instance to ",(0,a.kt)("inlineCode",{parentName:"p"},"World.prototype.addSystem()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"world.addSystem(new MyCustomSys());\n\n// Can also use\nworld.addSystem(MyCustomSys);\n")),(0,a.kt)("p",null,"This will also enable the system by default."),(0,a.kt)("h2",{id:"enable-a-system"},"Enable a system:"),(0,a.kt)("p",null,"To enable a system (call its ",(0,a.kt)("inlineCode",{parentName:"p"},"update()")," method anytime the world is updated), use ",(0,a.kt)("inlineCode",{parentName:"p"},"World.prototype.enable")," and pass in the class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"world.enable(MyCustomSys);\n")),(0,a.kt)("h2",{id:"disable-a-system"},"Disable a system:"),(0,a.kt)("p",null,"There is no reason for a system to be fully removed from the world, but you can disable it from updating with the rest of the world using ",(0,a.kt)("inlineCode",{parentName:"p"},"World.prototype.disable"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"world.disable(MyCustomSys);\n")),(0,a.kt)("h2",{id:"update-systems"},"Update systems"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"World.prototype.update()")," is used to update the world, and can optionally take an array of System classes to update. If none are passed, all currently enabled systems are updated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Update all enabled systems\nworld.update();\n\n// Update specific systems\nworld.update(MyCustomSysA, MyCustomSysB);\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"When explicitly stating which systems to update, BagelECS doesn't check if a system is enabled or disabled. This means that if you are using your own enable/disable logic, and explicitly stating which systems to run, you could accidentally run a system after disabling it.")))}u.isMDXComponent=!0}}]);