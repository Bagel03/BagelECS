"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[239],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4181:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={title:"Quick Start",sidebar_position:2},s=void 0,i={unversionedId:"quick-start",id:"quick-start",title:"Quick Start",description:"This is a sample project that doesn't actually run, but should give you a feel for all the different APIs that BagelECS provides",source:"@site/docs/quick-start.md",sourceDirName:".",slug:"/quick-start",permalink:"/BagelECS/docs/quick-start",draft:!1,editUrl:"https://github.com/Bagel03/BagelECS/edit/master/docs/docs/quick-start.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Quick Start",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/BagelECS/docs/"},next:{title:"World",permalink:"/BagelECS/docs/reference/World"}},c={},l=[],u={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This is a sample project that doesn't actually run, but should give you a feel for all the different APIs that BagelECS provides"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// Use an external class as a component\nimport { Object3D } from "three";\n\n// Define a "fast" - builtin component\nconst Vec = Component(\n    {\n        x: Type.number,\n        y: Type.number,\n    },\n    {\n        // Add some useful methods as you would to any other class\n        add(x: number, y: number): void {\n            this.x += x;\n            this.y += y;\n        },\n    }\n);\n\n// Create a system that only needs one kind of entity\nclass MovementSys extends CustomSystem(Vec) {\n    update(): void {\n        this.entities.forEach((ent) => Vec.add(ent, 1, 1));\n    }\n}\n\n// Create a system that needs more than one kind of entity\nclass FullMovementSys extends CustomSystem({ threeD: Object3D, twoD: Vec }) {\n    update(): void {\n        this.entities.twoD.forEach((ent) => Vec.add(ent, 1, 1));\n        this.entities.threeD.forEach((ent) => {\n            ent.get(Object3D).position.x += 1;\n            ent.get(Object3D).position.y += 1;\n        });\n    }\n}\n\n// A world holds all entities\nconst world = new World(100);\n\n// Systems can be added to worlds and run on the world\'s "update" method\nworld.addSystem(FullMovementSys);\n\n// Get a new entity\nconst ent = world.spawn();\n\n// Add some stuff to it\nent.add(new Vec({ x: 1, y: 1 }));\n\n// Run all the systems on their targeted entities\nworld.update();\n\n// Check the entities new position\nconsole.log(ent.get(Vec.x), ent.get(Vec.y));\n')))}p.isMDXComponent=!0}}]);