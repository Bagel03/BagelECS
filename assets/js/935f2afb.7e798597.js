"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Overview","href":"/BagelECS/docs/","docId":"index"},{"type":"link","label":"Quick Start","href":"/BagelECS/docs/quick-start","docId":"quick-start"},{"type":"category","label":"Guide","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"World","href":"/BagelECS/docs/reference/World","docId":"reference/World"},{"type":"link","label":"Entities","href":"/BagelECS/docs/reference/Entities","docId":"reference/Entities"},{"type":"link","label":"Components","href":"/BagelECS/docs/reference/Components","docId":"reference/Components"},{"type":"link","label":"Resources","href":"/BagelECS/docs/reference/Resources","docId":"reference/Resources"},{"type":"link","label":"Queries","href":"/BagelECS/docs/reference/Queries","docId":"reference/Queries"},{"type":"link","label":"Systems","href":"/BagelECS/docs/reference/Systems","docId":"reference/Systems"},{"type":"link","label":"Multithreading","href":"/BagelECS/docs/reference/Multithreading","docId":"reference/Multithreading"},{"type":"link","label":"Relationships","href":"/BagelECS/docs/reference/Relationships","docId":"reference/Relationships"},{"type":"link","label":"Hierarchy","href":"/BagelECS/docs/reference/Hierarchy","docId":"reference/Hierarchy"}]},{"type":"link","label":"API Reference","href":"/BagelECS/docs/api/","docId":"api/api"}]},"docs":{"api/api":{"id":"api/api","title":"Coming soon\u2122\ufe0f","description":"","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Overview","description":"BagelECS is my attempt to create a typescript ECS implementation that is both performance oriented and human friendly.","sidebar":"tutorialSidebar"},"quick-start":{"id":"quick-start","title":"Quick Start","description":"This is a sample project that doesn\'t actually run, but should give you a feel for all the different APIs that BagelECS provides","sidebar":"tutorialSidebar"},"reference/Components":{"id":"reference/Components","title":"Components","description":"Components hold all the data that is contained inside entities. BagelECS has 2 kinds of components: \\"Built-in\\" and \\"External\\"; Built-in components are made specifically for BagelECS, and benefit from all of BagelECS\' performance optimizations. External components are things that come from other libraries, and allow you greater flexibility over what you want to do.","sidebar":"tutorialSidebar"},"reference/Entities":{"id":"reference/Entities","title":"Entities","description":"Entities are the building blocks of the world. Any \\"thing\\" that exists inside your world is an entity (player, wall, lights, etc.). They hold data in the form of components, which can hold values, and also represent relationships and tags.","sidebar":"tutorialSidebar"},"reference/Hierarchy":{"id":"reference/Hierarchy","title":"Hierarchy","description":"This is still being worked on, and APIs are subject to change. Documentation will be available once all features have been at least partially implemented","sidebar":"tutorialSidebar"},"reference/Multithreading":{"id":"reference/Multithreading","title":"Multithreading","description":"BagelECS provides a simple way to add multithreading to your application through JS worker threads. Most things should be seamless, but there are a few important limitations that you should know about.","sidebar":"tutorialSidebar"},"reference/Queries":{"id":"reference/Queries","title":"Queries","description":"Quieres represent sets of entities that fit some defined criteria. They are most often used within systems, but you can create one-time queries just as easily.","sidebar":"tutorialSidebar"},"reference/Relationships":{"id":"reference/Relationships","title":"Relationships","description":"This is still being worked on, and APIs are subject to change. Documentation will be available once all features have been at least partially implemented","sidebar":"tutorialSidebar"},"reference/Resources":{"id":"reference/Resources","title":"Resources","description":"Sometimes, it is useful to have global data that is not associated with any specific entity. To handle this, BagelECS supports bevy inspired resources. These follow most of the same rules as components, except they are associated with the world instead of entities.","sidebar":"tutorialSidebar"},"reference/Systems":{"id":"reference/Systems","title":"Systems","description":"Systems define how your entities interact with each other in the world, and use queries to modify specific entities\' properties","sidebar":"tutorialSidebar"},"reference/World":{"id":"reference/World","title":"World","description":"Everything in BagelECS is contained in a World, including entities, resources, and systems. More detailed documentation for each is available on their respective pages, this section is just a high level overview of a world.","sidebar":"tutorialSidebar"}}}')}}]);